// Sikkim Travel Chatbot - Multilingual Assistant

// Language data and responses
const CHATBOT_DATA = {
  "languages": {
    "english": {
      "name": "English",
      "code": "en",
      "flag": "ЁЯЗмЁЯЗз",
      "font_class": "",
      "greetings": {
        "hello": "Hello! Welcome to Sikkim!",
        "welcome": "Welcome to the beautiful state of Sikkim!",
        "goodbye": "Thank you for visiting! Have a great trip to Sikkim!"
      },
      "responses": {
        "default": "Hi there! I'm your Sikkim travel assistant. I can help you with information about destinations, weather, permits, and travel tips for Sikkim. How can I assist you today?",
        "destinations": "Sikkim has amazing destinations like Gangtok (capital), Pelling, Yuksom, Tsomgo Lake, Gurudongmar Lake, Yumthang Valley, Nathula Pass, and more. Which destination would you like to know about?",
        "weather": "Sikkim has pleasant weather year-round. Best time to visit: March to June and September to December. Summer is ideal for high altitude areas.",
        "permits": "Indian citizens need Inner Line Permit (ILP) for protected areas. Foreign nationals need Protected Area Permit (PAP) and Restricted Area Permit (RAP).",
        "hotels": "Sikkim offers various accommodations from luxury hotels in Gangtok to homestays in villages. Popular areas: MG Marg in Gangtok, Pelling, Ravangla.",
        "transport": "Nearest airport: Bagdogra (124 km from Gangtok). Nearest railway: New Jalpaiguri. Local transport includes taxis, shared jeeps, and buses.",
        "food": "Try local delicacies: Momos, Thukpa, Gundruk, Sel Roti, Chhurpi cheese, and traditional Sikkimese cuisine.",
        "culture": "Sikkim is multi-cultural with Lepcha, Bhutia, and Nepali communities. Visit monasteries, experience festivals like Losar and Pang Lhabsol."
      },
      "quickActions": ["Destinations", "Weather", "Permits", "Hotels", "Food", "Culture"],
      "ui": {
        "inputPlaceholder": "Type your message...",
        "sendButton": "Send",
        "selectLanguage": "Choose Your Language",
        "botName": "Sikkim Travel Assistant",
        "status": "Online"
      }
    },
    "hindi": {
      "name": "рд╣рд┐рдВрджреА",
      "code": "hi", 
      "flag": "ЁЯЗоЁЯЗ│",
      "font_class": "lang-hindi",
      "greetings": {
        "hello": "рдирдорд╕реНрддреЗ! рд╕рд┐рдХреНрдХрд┐рдо рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!",
        "welcome": "рд╕реБрдВрджрд░ рд╕рд┐рдХреНрдХрд┐рдо рд░рд╛рдЬреНрдп рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!",
        "goodbye": "рдзрдиреНрдпрд╡рд╛рдж! рд╕рд┐рдХреНрдХрд┐рдо рдХреА рдпрд╛рддреНрд░рд╛ рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ!"
      },
      "responses": {
        "default": "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рд╕рд┐рдХреНрдХрд┐рдо рдпрд╛рддреНрд░рд╛ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреЛ рдЧрдВрддрд╡реНрдп, рдореМрд╕рдо, рдкрд░рдорд┐рдЯ рдФрд░ рд╕рд┐рдХреНрдХрд┐рдо рдХреА рдпрд╛рддреНрд░рд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
        "destinations": "рд╕рд┐рдХреНрдХрд┐рдо рдореЗрдВ рдЧрдВрдЧрдЯреЛрдХ (рд░рд╛рдЬрдзрд╛рдиреА), рдкреЗрд▓рд┐рдВрдЧ, рдпреБрдХреНрд╕рдо, рддреНрд╕реЛрдордЧреЛ рдЭреАрд▓, рдЧреБрд░реБрдбреЛрдВрдЧрдорд╛рд░ рдЭреАрд▓, рдпреБрдордерд╛рдВрдЧ рдШрд╛рдЯреА, рдирд╛рдереВрд▓рд╛ рдкрд╛рд╕ рдЬреИрд╕реЗ рдЕрджреНрднреБрдд рд╕реНрдерд╛рди рд╣реИрдВред рдЖрдк рдХрд┐рд╕ рдЧрдВрддрд╡реНрдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
        "weather": "рд╕рд┐рдХреНрдХрд┐рдо рдореЗрдВ рд╕рд╛рд▓ рднрд░ рд╕реБрд╣рд╛рд╡рдирд╛ рдореМрд╕рдо рд░рд╣рддрд╛ рд╣реИред рдШреВрдордиреЗ рдХрд╛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд╕рдордп: рдорд╛рд░реНрдЪ рд╕реЗ рдЬреВрди рдФрд░ рд╕рд┐рддрдВрдмрд░ рд╕реЗ рджрд┐рд╕рдВрдмрд░ред рдКрдВрдЪрд╛рдИ рд╡рд╛рд▓реЗ рдХреНрд╖реЗрддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдЧрд░реНрдореА рдЖрджрд░реНрд╢ рд╣реИред",
        "permits": "рднрд╛рд░рддреАрдп рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреЛ рд╕рдВрд░рдХреНрд╖рд┐рдд рдХреНрд╖реЗрддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдЗрдирд░ рд▓рд╛рдЗрди рдкрд░рдорд┐рдЯ (ILP) рдЪрд╛рд╣рд┐рдПред рд╡рд┐рджреЗрд╢реА рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреЛ рдкреНрд░реЛрдЯреЗрдХреНрдЯреЗрдб рдПрд░рд┐рдпрд╛ рдкрд░рдорд┐рдЯ (PAP) рдФрд░ рд░рд┐рд╕реНрдЯреНрд░рд┐рдХреНрдЯреЗрдб рдПрд░рд┐рдпрд╛ рдкрд░рдорд┐рдЯ (RAP) рдЪрд╛рд╣рд┐рдПред",
        "hotels": "рд╕рд┐рдХреНрдХрд┐рдо рдореЗрдВ рдЧрдВрдЧрдЯреЛрдХ рдХреЗ рд▓рдХреНрдЬрд░реА рд╣реЛрдЯрд▓ рд╕реЗ рд▓реЗрдХрд░ рдЧрд╛рдВрд╡реЛрдВ рдореЗрдВ рд╣реЛрдорд╕реНрдЯреЗ рддрдХ рд╡рд┐рднрд┐рдиреНрди рдЖрд╡рд╛рд╕ рдЙрдкрд▓рдмреНрдз рд╣реИрдВред рд▓реЛрдХрдкреНрд░рд┐рдп рдХреНрд╖реЗрддреНрд░: рдЧрдВрдЧрдЯреЛрдХ рдореЗрдВ рдПрдордЬреА рдорд╛рд░реНрдЧ, рдкреЗрд▓рд┐рдВрдЧ, рд░рд╛рд╡рдВрдЧрд▓рд╛ред",
        "transport": "рдирд┐рдХрдЯрддрдо рд╣рд╡рд╛рдИ рдЕрдбреНрдбрд╛: рдмрд╛рдЧрдбреЛрдЧрд░рд╛ (рдЧрдВрдЧрдЯреЛрдХ рд╕реЗ 124 рдХрд┐рдореА)ред рдирд┐рдХрдЯрддрдо рд░реЗрд▓рд╡реЗ: рдиреНрдпреВ рдЬрд▓рдкрд╛рдИрдЧреБрдбрд╝реАред рд╕реНрдерд╛рдиреАрдп рдкрд░рд┐рд╡рд╣рди рдореЗрдВ рдЯреИрдХреНрд╕реА, рд╕рд╛рдЭрд╛ рдЬреАрдк рдФрд░ рдмрд╕реЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реИрдВред",
        "food": "рд╕реНрдерд╛рдиреАрдп рд╡реНрдпрдВрдЬрди рдЖрдЬрд╝рдорд╛рдПрдВ: рдореЛрдореЛрдЬрд╝, рдереБрдХрдкрд╛, рдЧреБрдВрджреНрд░реБрдХ, рд╕реЗрд▓ рд░реЛрдЯреА, рдЫреБрд░реНрдкреА рдЪреАрдЬрд╝, рдФрд░ рдкрд╛рд░рдВрдкрд░рд┐рдХ рд╕рд┐рдХреНрдХрд┐рдореА рд╡реНрдпрдВрдЬрдиред",
        "culture": "рд╕рд┐рдХреНрдХрд┐рдо рд▓реЗрдкрдЪрд╛, рднреВрдЯрд┐рдпрд╛ рдФрд░ рдиреЗрдкрд╛рд▓реА рд╕рдореБрджрд╛рдпреЛрдВ рдХреЗ рд╕рд╛рде рдмрд╣реБ-рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╣реИред рдордареЛрдВ рдХреА рдпрд╛рддреНрд░рд╛ рдХрд░реЗрдВ, рд▓реЛрд╕рд╛рд░ рдФрд░ рдкрд╛рдВрдЧ рд▓реНрд╣рд╛рдмреНрд╕реЛрд▓ рдЬреИрд╕реЗ рддреНрдпреЛрд╣рд╛рд░реЛрдВ рдХрд╛ рдЕрдиреБрднрд╡ рдХрд░реЗрдВред"
      },
      "quickActions": ["рдЧрдВрддрд╡реНрдп", "рдореМрд╕рдо", "рдкрд░рдорд┐рдЯ", "рд╣реЛрдЯрд▓", "рдЦрд╛рдирд╛", "рд╕рдВрд╕реНрдХреГрддрд┐"],
      "ui": {
        "inputPlaceholder": "рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рд▓рд┐рдЦреЗрдВ...",
        "sendButton": "рднреЗрдЬреЗрдВ",
        "selectLanguage": "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "botName": "рд╕рд┐рдХреНрдХрд┐рдо рдпрд╛рддреНрд░рд╛ рд╕рд╣рд╛рдпрдХ",
        "status": "рдСрдирд▓рд╛рдЗрди"
      }
    },
    "nepali": {
      "name": "рдиреЗрдкрд╛рд▓реА",
      "code": "ne",
      "flag": "ЁЯЗ│ЁЯЗ╡", 
      "font_class": "lang-nepali",
      "greetings": {
        "hello": "рдирдорд╕реНрддреЗ! рд╕рд┐рдХреНрдХрд┐рдордорд╛ рд╕реНрд╡рд╛рдЧрдд рдЫ!",
        "welcome": "рд╕реБрдиреНрджрд░ рд╕рд┐рдХреНрдХрд┐рдо рд░рд╛рдЬреНрдпрдорд╛ рд╕реНрд╡рд╛рдЧрдд рдЫ!",
        "goodbye": "рдзрдиреНрдпрд╡рд╛рдж! рд╕рд┐рдХреНрдХрд┐рдордХреЛ рдпрд╛рддреНрд░рд╛рдХреЛ рдЖрдирдиреНрдж рд▓рд┐рдиреБрд╣реЛрд╕реН!"
      },
      "responses": {
        "default": "рдирдорд╕реНрддреЗ! рдо рддрдкрд╛рдИрдВрдХреЛ рд╕рд┐рдХреНрдХрд┐рдо рдпрд╛рддреНрд░рд╛ рд╕рд╣рд╛рдпрдХ рд╣реБрдБред рдо рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЧрдиреНрддрд╡реНрдп, рдореМрд╕рдо, рдЕрдиреБрдорддрд┐ рд░ рд╕рд┐рдХреНрдХрд┐рдордХреЛ рдпрд╛рддреНрд░рд╛рдХреЛ рдмрд╛рд░реЗрдорд╛ рдЬрд╛рдирдХрд╛рд░реА рджрд┐рди рд╕рдХреНрдЫреБред рдЖрдЬ рдо рддрдкрд╛рдИрдВрдХреЛ рдХрд╕рд░реА рд╕рд╣рд╛рдпрддрд╛ рдЧрд░реНрди рд╕рдХреНрдЫреБ?",
        "destinations": "рд╕рд┐рдХреНрдХрд┐рдордорд╛ рдЧрд╛рдиреНрддреЛрдХ (рд░рд╛рдЬрдзрд╛рдиреА), рдкреЗрд▓рд┐рдЩ, рдпреБрдХреНрд╕рдо, рддреНрд╕реЛрдордЧреЛ рддрд╛рд▓, рдЧреБрд░реБрдбреЛрдВрдЧрдорд╛рд░ рддрд╛рд▓, рдпреБрдореНрдерд╛рдЩ рдЙрдкрддреНрдпрдХрд╛, рдирд╛рдереБрд▓рд╛ рдкрд╛рд╕ рдЬрд╕реНрддрд╛ рдЕрджреНрднреБрдд рдард╛рдЙрдБрд╣рд░реВ рдЫрдиреНред рддрдкрд╛рдИрдВ рдХреБрди рдЧрдиреНрддрд╡реНрдпрдХреЛ рдмрд╛рд░реЗрдорд╛ рдЬрд╛рдиреНрди рдЪрд╛рд╣рдиреБрд╣реБрдиреНрдЫ?",
        "weather": "рд╕рд┐рдХреНрдХрд┐рдордорд╛ рд╡рд░реНрд╖рднрд░рд┐ рд░рдордгреАрдп рдореМрд╕рдо рд░рд╣рдиреНрдЫред рдШреБрдореНрдирдХреЛ рд▓рд╛рдЧрд┐ рдЙрддреНрддрдо рд╕рдордп: рдорд╛рд░реНрдЪрджреЗрдЦрд┐ рдЬреБрдирд╕рдореНрдо рд░ рд╕реЗрдкреНрдЯреЗрдореНрдмрд░рджреЗрдЦрд┐ рдбрд┐рд╕реЗрдореНрдмрд░рд╕рдореНрдоред рдЙрдЪреНрдЪ рдЙрдЪрд╛рдЗрдХрд╛ рдХреНрд╖реЗрддреНрд░рд╣рд░реВрдХреЛ рд▓рд╛рдЧрд┐ рдЧрд░реНрдореА рдЖрджрд░реНрд╢ рдЫред",
        "permits": "рднрд╛рд░рддреАрдп рдирд╛рдЧрд░рд┐рдХрд╣рд░реВрд▓рд╛рдИ рд╕реБрд░рдХреНрд╖рд┐рдд рдХреНрд╖реЗрддреНрд░рд╣рд░реВрдХреЛ рд▓рд╛рдЧрд┐ рднрд┐рддреНрд░реА рд░реЗрдЦрд╛ рдЕрдиреБрдорддрд┐ (ILP) рдЪрд╛рд╣рд┐рдиреНрдЫред рд╡рд┐рджреЗрд╢реА рдирд╛рдЧрд░рд┐рдХрд╣рд░реВрд▓рд╛рдИ рд╕реБрд░рдХреНрд╖рд┐рдд рдХреНрд╖реЗрддреНрд░ рдЕрдиреБрдорддрд┐ (PAP) рд░ рдкреНрд░рддрд┐рдмрдиреНрдзрд┐рдд рдХреНрд╖реЗрддреНрд░ рдЕрдиреБрдорддрд┐ (RAP) рдЪрд╛рд╣рд┐рдиреНрдЫред",
        "hotels": "рд╕рд┐рдХреНрдХрд┐рдордорд╛ рдЧрд╛рдиреНрддреЛрдХрдХрд╛ рд▓рдХреНрдЬрд░реА рд╣реЛрдЯреЗрд▓рджреЗрдЦрд┐ рдЧрд╛рдЙрдБрдХрд╛ рд╣реЛрдорд╕реНрдЯреЗрд╕рдореНрдо рд╡рд┐рднрд┐рдиреНрди рдЖрд╡рд╛рд╕рд╣рд░реВ рдЫрдиреНред рд▓реЛрдХрдкреНрд░рд┐рдп рдХреНрд╖реЗрддреНрд░рд╣рд░реВ: рдЧрд╛рдиреНрддреЛрдХрдХреЛ рдПрдордЬреА рдорд╛рд░реНрдЧ, рдкреЗрд▓рд┐рдЩ, рд░рд╛рд╡рд╛рдЩрд▓рд╛ред",
        "transport": "рдирд┐рдХрдЯрддрдо рд╡рд┐рдорд╛рдирд╕реНрдерд▓: рдмрд╛рдЧрдбреЛрдЧрд░рд╛ (рдЧрд╛рдиреНрддреЛрдХрдмрд╛рдЯ резреирек рдХрд┐рдореА)ред рдирд┐рдХрдЯрддрдо рд░реЗрд▓рд╡реЗ: рдирдпрд╛рдБ рдЬрд▓рдкрд╛рдИрдЧреБрдбреАред рд╕реНрдерд╛рдиреАрдп рдпрд╛рддрд╛рдпрд╛рддрдорд╛ рдЯреНрдпрд╛рдХреНрд╕реА, рд╕рд╛рдЭрд╛ рдЬреАрдк рд░ рдмрд╕рд╣рд░реВ рдЫрдиреНред",
        "food": "рд╕реНрдерд╛рдиреАрдп рд╡реНрдпрдЮреНрдЬрдирд╣рд░реВ рдЪрд╛рдЦреНрдиреБрд╣реЛрд╕реН: рдореЛрдореЛ, рдереБрдХреНрдкрд╛, рдЧреБрдиреНрджреНрд░реБрдХ, рд╕реЗрд▓ рд░реЛрдЯреА, рдЫреБрд░реНрдкреА рдЪрд┐рдЬ, рд░ рдкрд░рдореНрдкрд░рд╛рдЧрдд рд╕рд┐рдХреНрдХрд┐рдореА рд╡реНрдпрдЮреНрдЬрдирд╣рд░реВред",
        "culture": "рд╕рд┐рдХреНрдХрд┐рдо рд▓реЗрдкреНрдЪрд╛, рднреБрдЯрд┐рдпрд╛ рд░ рдиреЗрдкрд╛рд▓реА рд╕рдореБрджрд╛рдпрд╣рд░реВрд╕рдБрдЧ рдмрд╣реБ-рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдЫред рдЧреБрдореНрдмрд╛рд╣рд░реВрдХреЛ рднреНрд░рдордг рдЧрд░реНрдиреБрд╣реЛрд╕реН, рд▓реЛрд╕рд╛рд░ рд░ рдкрд╛рдЩ рд▓реНрд╣рд╛рдмреНрд╕реЛрд▓ рдЬрд╕реНрддрд╛ рдЪрд╛рдбрдкрд░реНрд╡рд╣рд░реВрдХреЛ рдЕрдиреБрднрд╡ рдЧрд░реНрдиреБрд╣реЛрд╕реНред"
      },
      "quickActions": ["рдЧрдиреНрддрд╡реНрдпрд╣рд░реВ", "рдореМрд╕рдо", "рдЕрдиреБрдорддрд┐", "рд╣реЛрдЯрд▓рд╣рд░реВ", "рдЦрд╛рдирд╛", "рд╕рдВрд╕реНрдХреГрддрд┐"],
      "ui": {
        "inputPlaceholder": "рддрдкрд╛рдИрдВрдХреЛ рд╕рдиреНрджреЗрд╢ рдЯрд╛рдЗрдк рдЧрд░реНрдиреБрд╣реЛрд╕реН...",
        "sendButton": "рдкрдард╛рдЙрдиреБрд╣реЛрд╕реН",
        "selectLanguage": "рддрдкрд╛рдИрдВрдХреЛ рднрд╛рд╖рд╛ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН",
        "botName": "рд╕рд┐рдХреНрдХрд┐рдо рдпрд╛рддреНрд░рд╛ рд╕рд╣рд╛рдпрдХ",
        "status": "рдЕрдирд▓рд╛рдЗрди"
      }
    },
    "lepcha": {
      "name": "Lepcha",
      "code": "lep", 
      "flag": "ЁЯПФя╕П",
      "font_class": "lang-lepcha",
      "greetings": {
        "hello": "Om─Бne! Mayel Lyang la kalek!",
        "welcome": "Mayel Lyang la changpen laksho!",
        "goodbye": "Thugje-che! Mayel Lyang la kalek lhen!"
      },
      "responses": {
        "default": "Om─Бne! Nga Sikkim yul-gyi lamyig rokpa yin. Nga khyed la sa-cha, nam-shi, lagpa dang Sikkim-gyi lam-yig skor la thenpa thub. De-ring nga khyed la ji-tar rogpa thub?",
        "destinations": "Mayel Lyang la Gangtok (rgyal-khab), Pelling, Yuksom, Tsomgo mtsho, Gurudongmar mtsho, Yumthang lung-pa, Nathu-la sogs yod. Khyed sa-cha gang-la shes-'dod?",
        "weather": "Mayel Lyang la lo-rgyus kun-tu skyid-po'i nam-mkha yod. 'gro-ba'i dus mchog: Zla-ba gsum-pa nas drug-pa bar dang dgu-pa nas bcu-gnyis-pa bar. Sa mtho-po'i sar dbyar-ga legs-pa yin.",
        "permits": "Rgya-gar-ba rang-rigs la srung-skyob sa-khongs-kyi nang-gi rgyud-lam lag-khyer dgos. Phyi-rgyal-pa la srung-skyob sa-khongs lag-khyer dang bcad-pa sa-khongs lag-khyer dgos.",
        "hotels": "Mayel Lyang la Gangtok-gi gra-pa'i khang-pa nas grong-pa'i khyim-gnas bar du 'khrugs-pa'i gnas yod. Grags-can sa-khongs: Gangtok-gi MG Marg, Pelling, Ravangla.",
        "transport": "Nye-shu gnam-thang: Bagdogra (Gangtok nas km 124). Nye-shu lcags-lam: New Jalpaiguri. Yul-phyogs 'phur-ba la mo-ta, mthun-po'i shing-rta dang gru-gzings yod.",
        "food": "Yul-phyogs zas-'thung myong-ba: Momos, Thukpa, Gundruk, Sel Roti, Chhurpi mar-ba, dang yul-phyogs Sikkim zas.",
        "culture": "Mayel Lyang Lepcha, Bhutia dang Nepali mi-rigs dang ldan-pa rig-gzhung mang-po yod. Dgon-pa la 'gro-ba, Losar dang Pang Lhabsol sogs dus-chen myong-ba."
      },
      "quickActions": ["Sa-cha", "Nam-shi", "Lag-pa", "Khang-pa", "Zas-'thung", "Rig-gzhung"],
      "ui": {
        "inputPlaceholder": "Khyed-kyi yi-ge bkod...",
        "sendButton": "Btang",
        "selectLanguage": "Khyed-kyi skad-yig dem-khye",
        "botName": "Mayel Lyang Lamyig Rokpa",
        "status": "Yod-pa"
      }
    },
    "bhutia": {
      "name": "Bhutia",
      "code": "sip",
      "flag": "ЁЯПФя╕П", 
      "font_class": "lang-bhutia",
      "greetings": {
        "hello": "Kuzu-zangpo! Denjong la pheple!",
        "welcome": "Changpa-laksho! Denjong la kalek!",
        "goodbye": "Thugje-che! Denjong-la kalek nangten!"
      },
      "responses": {
        "default": "Kuzu-zangpo! Nga khyed-kyi Denjong lamyig rokpa yin. Nga khyed la yul-ljongs, dus-tshod, lagpa dang Denjong-gi lamyig skor thenpai thub. De-ring nga khyed la ji-tar rogpa thub?",
        "destinations": "Denjong la Gangtok (rgyal-sa), Pelling, Yuksom, Tsomgo-mtsho, Gurudongmar-mtsho, Yumthang lung-pa, Nathu-la sogs po-ta'i yul-ljongs yod. Khyed gang la shes-'dod?",
        "weather": "Denjong la lo-rgyus kun-tu skyid-po'i gnam-gshis yod. 'gro-thang mchog: zla-ba gsum-pa nas drug-pa bar dang zla-ba dgu-pa nas bcu-gnyis-pa bar. Ri mtho-po'i sar dbyar-ga legs-pa yin.",
        "permits": "Rgya-gar mi-ser la srung-skyob sa-khul-gyi nang-gi bar-lam lagpa dgos. Phyi-rgyal mi-ser la srung-skyob sa-khul lagpa dang bkag-pa sa-khul lagpa dgos.",
        "hotels": "Denjong la Gangtok-gi gra-pa'i gnas-khang nas grong-khyer gyi khyim-gnas bar-du'i gnas yod. Grags-can sa-khul: Gangtok MG Marg, Pelling, Ravangla.",
        "transport": "Nye-shu gnam-thang: Bagdogra (Gangtok nas km 124). Nye-shu lcags-lam: New Jalpaiguri. Sa-gnas 'khrul-'khor la mo-ta, mthun-po'i shing-rta dang 'khrul-'khor yod.",
        "food": "Sa-gnas kha-zas myong-ba: Momos, Thukpa, Gundruk, Sel Roti, Chhurpi mar-ba, dang sa-gnas Denjong-gi kha-lag.",
        "culture": "Denjong Lepcha, Bhutia dang Balti mi-rigs dang-bcas rig-gzhung mang-po yod. Dgon-pa la 'gro-ba, Losar dang Pang Lhabsol sogs dus-chen myong-ba."
      },
      "quickActions": ["Yul-ljongs", "Gnam-gshis", "Lagpa", "Gnas-khang", "Kha-zas", "Rig-gzhung"],
      "ui": {
        "inputPlaceholder": "Khyed-kyi gtam bkod...",
        "sendButton": "Gtong",
        "selectLanguage": "Khyed-kyi skad-yig khel",
        "botName": "Denjong Lamyig Rokpa",
        "status": "Yod-pa"
      }
    }
  },
  "intents": {
    "greetings": ["hello", "hi", "namaste", "good morning", "good evening", "kuzu zangpo", "omane", "рдирдорд╕реНрддреЗ", "рд╣реИрд▓реЛ", "рд╣рд╛рдп"],
    "destinations": ["places", "visit", "destinations", "gangtok", "pelling", "yuksom", "tsomgo", "gurudongmar", "yumthang", "nathu la", "where to go", "рдЧрдВрддрд╡реНрдп", "рд╕реНрдерд╛рди", "рдЬрдЧрд╣"],
    "weather": ["weather", "climate", "temperature", "season", "rain", "snow", "cold", "hot", "рдореМрд╕рдо", "рдЬрд▓рд╡рд╛рдпреБ", "рддрд╛рдкрдорд╛рди"],
    "permits": ["permit", "permission", "pass", "document", "foreigner", "tourist", "visa", "рдкрд░рдорд┐рдЯ", "рдЕрдиреБрдорддрд┐", "рджрд╕реНрддрд╛рд╡реЗрдЬ"],
    "hotels": ["hotel", "stay", "accommodation", "lodge", "guesthouse", "homestay", "where to stay", "рд╣реЛрдЯрд▓", "рдЖрд╡рд╛рд╕", "рдард╣рд░рдирд╛"],
    "transport": ["transport", "travel", "bus", "taxi", "flight", "train", "airport", "how to reach", "рдкрд░рд┐рд╡рд╣рди", "рдпрд╛рддреНрд░рд╛", "рдмрд╕"],
    "food": ["food", "eat", "restaurant", "local food", "cuisine", "momo", "thukpa", "рдЦрд╛рдирд╛", "рднреЛрдЬрди", "рд╡реНрдпрдВрдЬрди"],
    "culture": ["culture", "festival", "monastery", "tradition", "people", "language", "religion", "рд╕рдВрд╕реНрдХреГрддрд┐", "рддреНрдпреЛрд╣рд╛рд░", "рдорда"]
  }
};

// Global state
let currentLanguage = 'english';
let chatState = {
  isOpen: false,
  isLanguagePanelOpen: false,
  isMinimized: false,
  hasInteracted: false,
  messageCount: 0
};

// DOM elements
let elements = {};

// Initialize the chatbot when DOM is ready
function initializeChatbot() {
  console.log('Initializing Sikkim Travel Chatbot...');
  
  // Get DOM elements
  elements = {
    toggle: document.getElementById('chat-widget-toggle'),
    widget: document.getElementById('chat-widget'),
    languagePanel: document.getElementById('language-panel'),
    languageToggle: document.getElementById('language-toggle'),
    currentLanguageFlag: document.getElementById('current-language-flag'),
    chatMessages: document.getElementById('chat-messages'),
    chatInput: document.getElementById('chat-input'),
    chatSend: document.getElementById('chat-send'),
    quickActions: document.getElementById('quick-actions'),
    typingIndicator: document.getElementById('typing-indicator'),
    notificationBadge: document.getElementById('notification-badge'),
    chatBotName: document.getElementById('chat-bot-name'),
    chatStatus: document.getElementById('chat-status'),
    chatMinimize: document.getElementById('chat-minimize')
  };

  // Setup event listeners
  setupEventListeners();
  
  // Initialize language
  updateLanguage(currentLanguage);
  
  // Show welcome message after a short delay
  setTimeout(() => {
    if (!chatState.hasInteracted) {
      showWelcomeMessage();
    }
  }, 2000);

  console.log('Chatbot initialized successfully');
}

// Setup all event listeners
function setupEventListeners() {
  // Toggle chat widget
  elements.toggle.addEventListener('click', toggleChatWidget);
  
  // Language toggle
  elements.languageToggle.addEventListener('click', toggleLanguagePanel);
  
  // Minimize chat
  elements.chatMinimize.addEventListener('click', minimizeChat);
  
  // Send message
  elements.chatSend.addEventListener('click', handleSendMessage);
  elements.chatInput.addEventListener('keypress', handleInputKeyPress);
  elements.chatInput.addEventListener('input', handleInputChange);
  
  // Language selection
  setupLanguageOptions();
  
  // Quick actions will be setup when they're rendered
  
  // Click outside to close language panel
  document.addEventListener('click', handleOutsideClick);
  
  // Prevent chat widget clicks from bubbling
  elements.widget.addEventListener('click', (e) => e.stopPropagation());
}

// Setup language option buttons
function setupLanguageOptions() {
  const languageOptions = document.querySelectorAll('.language-option');
  languageOptions.forEach(option => {
    option.addEventListener('click', () => {
      const lang = option.dataset.lang;
      selectLanguage(lang);
    });
  });
}

// Toggle chat widget visibility
function toggleChatWidget() {
  console.log('Toggling chat widget');
  
  chatState.isOpen = !chatState.isOpen;
  chatState.hasInteracted = true;
  
  if (chatState.isOpen) {
    elements.widget.classList.remove('hidden');
    elements.toggle.classList.add('active');
    elements.toggle.querySelector('.chat-icon').classList.add('hidden');
    elements.toggle.querySelector('.close-icon').classList.remove('hidden');
    hideNotificationBadge();
    focusChatInput();
  } else {
    elements.widget.classList.add('hidden');
    elements.toggle.classList.remove('active');
    elements.toggle.querySelector('.chat-icon').classList.remove('hidden');
    elements.toggle.querySelector('.close-icon').classList.add('hidden');
    hideLanguagePanel();
  }
}

// Toggle language selection panel
function toggleLanguagePanel() {
  chatState.isLanguagePanelOpen = !chatState.isLanguagePanelOpen;
  
  if (chatState.isLanguagePanelOpen) {
    elements.languagePanel.classList.remove('hidden');
  } else {
    elements.languagePanel.classList.add('hidden');
  }
}

// Hide language panel
function hideLanguagePanel() {
  chatState.isLanguagePanelOpen = false;
  elements.languagePanel.classList.add('hidden');
}

// Minimize/expand chat
function minimizeChat() {
  chatState.isMinimized = !chatState.isMinimized;
  
  if (chatState.isMinimized) {
    elements.widget.classList.add('minimized');
  } else {
    elements.widget.classList.remove('minimized');
  }
}

// Handle outside clicks
function handleOutsideClick(e) {
  if (!elements.widget.contains(e.target) && !elements.toggle.contains(e.target)) {
    if (chatState.isLanguagePanelOpen) {
      hideLanguagePanel();
    }
  }
}

// Select a language
function selectLanguage(lang) {
  console.log('Selecting language:', lang);
  
  if (CHATBOT_DATA.languages[lang]) {
    const previousLanguage = currentLanguage;
    currentLanguage = lang;
    updateLanguage(lang);
    hideLanguagePanel();
    
    if (previousLanguage !== lang) {
      addBotMessage(CHATBOT_DATA.languages[lang].greetings.welcome);
      renderQuickActions();
    }
  }
}

// Update UI for selected language
function updateLanguage(lang) {
  const langData = CHATBOT_DATA.languages[lang];
  if (!langData) return;
  
  // Update flag
  elements.currentLanguageFlag.textContent = langData.flag;
  
  // Update UI text
  elements.chatBotName.textContent = langData.ui.botName;
  elements.chatStatus.textContent = langData.ui.status;
  elements.chatInput.placeholder = langData.ui.inputPlaceholder;
  
  // Update font class for messages
  updateMessageFonts(langData.font_class);
  
  console.log('Language updated to:', lang);
}

// Update font classes for existing messages
function updateMessageFonts(fontClass) {
  const messages = elements.chatMessages.querySelectorAll('.message-content');
  messages.forEach(message => {
    message.className = `message-content ${fontClass}`;
  });
  
  // Update input font
  elements.chatInput.className = `chat-input ${fontClass}`;
  
  // Update quick actions font
  const quickActionBtns = elements.quickActions.querySelectorAll('.quick-action');
  quickActionBtns.forEach(btn => {
    btn.className = `quick-action ${fontClass}`;
  });
}

// Handle input key press
function handleInputKeyPress(e) {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    handleSendMessage();
  }
}

// Handle input changes
function handleInputChange() {
  const message = elements.chatInput.value.trim();
  elements.chatSend.disabled = message.length === 0;
}

// Handle send message
function handleSendMessage() {
  const message = elements.chatInput.value.trim();
  if (message.length === 0) return;
  
  // Add user message
  addUserMessage(message);
  
  // Clear input
  elements.chatInput.value = '';
  elements.chatSend.disabled = true;
  
  // Process message and respond
  setTimeout(() => {
    processUserMessage(message);
  }, 500);
}

// Add user message to chat
function addUserMessage(message) {
  const langData = CHATBOT_DATA.languages[currentLanguage];
  const messageEl = createMessageElement({
    content: message,
    isUser: true,
    fontClass: langData.font_class
  });
  
  elements.chatMessages.appendChild(messageEl);
  scrollToBottom();
  chatState.messageCount++;
}

// Add bot message to chat
function addBotMessage(message, showTyping = true) {
  if (showTyping) {
    showTypingIndicator();
    
    setTimeout(() => {
      hideTypingIndicator();
      addBotMessageImmediate(message);
    }, 1000 + Math.random() * 1000); // Random delay for realism
  } else {
    addBotMessageImmediate(message);
  }
}

// Add bot message immediately
function addBotMessageImmediate(message) {
  const langData = CHATBOT_DATA.languages[currentLanguage];
  const messageEl = createMessageElement({
    content: message,
    isUser: false,
    fontClass: langData.font_class
  });
  
  elements.chatMessages.appendChild(messageEl);
  scrollToBottom();
  chatState.messageCount++;
  
  if (!chatState.isOpen) {
    showNotificationBadge();
  }
}

// Create message element
function createMessageElement({ content, isUser, fontClass }) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `chat-message ${isUser ? 'user' : 'bot'}`;
  
  const avatar = document.createElement('div');
  avatar.className = `message-avatar ${isUser ? 'user' : 'bot'}`;
  avatar.textContent = isUser ? 'ЁЯСд' : 'ЁЯПФя╕П';
  
  const messageContent = document.createElement('div');
  messageContent.className = `message-content ${fontClass}`;
  messageContent.textContent = content;
  
  const messageTime = document.createElement('div');
  messageTime.className = 'message-time';
  messageTime.textContent = getCurrentTime();
  
  messageDiv.appendChild(avatar);
  messageDiv.appendChild(messageContent);
  messageContent.appendChild(messageTime);
  
  return messageDiv;
}

// Get current time formatted
function getCurrentTime() {
  const now = new Date();
  return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// Process user message and generate response
function processUserMessage(message) {
  console.log('Processing message:', message);
  
  const intent = detectIntent(message.toLowerCase());
  const langData = CHATBOT_DATA.languages[currentLanguage];
  
  let response;
  
  if (intent) {
    response = langData.responses[intent] || langData.responses.default;
  } else {
    response = langData.responses.default;
  }
  
  addBotMessage(response);
  
  // Update quick actions based on intent
  if (intent && intent !== 'greetings') {
    renderQuickActions();
  }
}

// Detect intent from user message
function detectIntent(message) {
  for (const [intent, keywords] of Object.entries(CHATBOT_DATA.intents)) {
    for (const keyword of keywords) {
      if (message.includes(keyword.toLowerCase())) {
        return intent;
      }
    }
  }
  return null;
}

// Show typing indicator
function showTypingIndicator() {
  elements.typingIndicator.classList.remove('hidden');
  scrollToBottom();
}

// Hide typing indicator
function hideTypingIndicator() {
  elements.typingIndicator.classList.add('hidden');
}

// Render quick action buttons
function renderQuickActions() {
  const langData = CHATBOT_DATA.languages[currentLanguage];
  elements.quickActions.innerHTML = '';
  
  langData.quickActions.forEach(action => {
    const button = document.createElement('button');
    button.className = `quick-action ${langData.font_class}`;
    button.textContent = action;
    button.addEventListener('click', () => handleQuickAction(action));
    elements.quickActions.appendChild(button);
  });
}

// Handle quick action click
function handleQuickAction(action) {
  // Map action to English for intent detection
  const actionMap = {
    'Destinations': 'destinations',
    'рдЧрдВрддрд╡реНрдп': 'destinations',
    'рдЧрдиреНрддрд╡реНрдпрд╣рд░реВ': 'destinations',
    'Sa-cha': 'destinations',
    'Yul-ljongs': 'destinations',
    
    'Weather': 'weather',
    'рдореМрд╕рдо': 'weather',
    'Nam-shi': 'weather',
    'Gnam-gshis': 'weather',
    
    'Permits': 'permits',
    'рдкрд░рдорд┐рдЯ': 'permits',
    'рдЕрдиреБрдорддрд┐': 'permits',
    'Lag-pa': 'permits',
    'Lagpa': 'permits',
    
    'Hotels': 'hotels',
    'рд╣реЛрдЯрд▓': 'hotels',
    'рд╣реЛрдЯрд▓рд╣рд░реВ': 'hotels',
    'Khang-pa': 'hotels',
    'Gnas-khang': 'hotels',
    
    'Food': 'food',
    'рдЦрд╛рдирд╛': 'food',
    "Zas-'thung": 'food',
    'Kha-zas': 'food',
    
    'Culture': 'culture',
    'рд╕рдВрд╕реНрдХреГрддрд┐': 'culture',
    'Rig-gzhung': 'culture'
  };
  
  const intent = actionMap[action] || 'destinations';
  const langData = CHATBOT_DATA.languages[currentLanguage];
  
  // Add user message
  addUserMessage(action);
  
  // Add bot response
  setTimeout(() => {
    const response = langData.responses[intent] || langData.responses.default;
    addBotMessage(response);
  }, 500);
}

// Show welcome message
function showWelcomeMessage() {
  const langData = CHATBOT_DATA.languages[currentLanguage];
  addBotMessage(langData.greetings.hello, false);
  
  setTimeout(() => {
    addBotMessage(langData.responses.default, false);
    renderQuickActions();
  }, 1000);
}

// Show notification badge
function showNotificationBadge() {
  elements.notificationBadge.classList.remove('hidden');
}

// Hide notification badge
function hideNotificationBadge() {
  elements.notificationBadge.classList.add('hidden');
}

// Focus chat input
function focusChatInput() {
  setTimeout(() => {
    elements.chatInput.focus();
  }, 100);
}

// Scroll chat to bottom
function scrollToBottom() {
  setTimeout(() => {
    elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
  }, 50);
}

// Utility: Debounce function
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeChatbot);
} else {
  initializeChatbot();
}

// Make functions globally available for debugging
window.sikkimChatbot = {
  selectLanguage,
  addBotMessage,
  processUserMessage,
  chatState,
  currentLanguage,
  CHATBOT_DATA
};

console.log('Sikkim Travel Chatbot script loaded successfully');